name: build

on: push

jobs:
  linux:
    name: Build (Linux)
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Clone GoCV
        run: git clone https://github.com/hybridgroup/gocv.git

      - name: Install OpenCV
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        run: cd gocv && make install

      - name: Test GoCV
        run: cd gocv && go run ./cmd/version/main.go

      - name: Install Tesseract
        run: sudo apt -y install tesseract-ocr libtesseract-dev

      - name: Test
        run: go run .

  windows:
    name: Build (Windows)
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-tesseract-ocr
            mingw-w64-x86_64-tesseract-data-eng
            mingw-w64-x86_64-leptonica

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Clone GoCV
        run: git clone https://github.com/hybridgroup/gocv.git

      - name: Make fake path
        run: mkdir -p C:/src/gocv.io/x/gocv

      - name: Cache OpenCV
        id: cache-opencv
        uses: actions/cache@v3
        with:
          path: C:/opencv
          key: ${{ runner.os }}-opencv

      - name: Install OpenCV
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        run: cd gocv && ./win_build_opencv.cmd
        env:
          GOPATH: "C:"

      - name: Test GoCV
        run: cd gocv && go run ./cmd/version/main.go

      - name: Test
        run: go run .
